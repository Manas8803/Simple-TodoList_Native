// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, deadline, is_completed)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	Deadline    pgtype.Date
	IsCompleted pgtype.Bool
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Deadline,
		arg.IsCompleted,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :one
SELECT id, title, description, deadline, is_completed FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) (Task, error) {
	row := q.db.QueryRow(ctx, getAllTasks)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Deadline,
		&i.IsCompleted,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, deadline, is_completed FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Deadline,
		&i.IsCompleted,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET title = $2, description = $3, deadline = $4, is_completed = $5
WHERE id = $1
`

type UpdateTaskParams struct {
	ID          int32
	Title       string
	Description pgtype.Text
	Deadline    pgtype.Date
	IsCompleted pgtype.Bool
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Deadline,
		arg.IsCompleted,
	)
	return err
}
